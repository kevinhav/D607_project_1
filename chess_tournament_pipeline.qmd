---
title: "Chess Tournament Database Pipeline"
author: "Kevin Havis"
format: pdf
editor: visual
---

## Introduction

## Loading the data

```{r}
library(tidyverse)
```

## Reading the data

```{r}

# Pre-define our target column names
col_names = c(
  'pairNum_state',
  'player_info',
  'total',
  '1',
  '2',
  '3',
  '4',
  '5',
  '6',
  '7'
)

# Create a tibble by splitting row-wise by line breaks
# and column-wise by pipe
df <- tibble(txt = read_lines('tournament_info.txt')) |> 
  separate_rows(sep = '\\n') |> 
  separate(col = txt, into = col_names, sep = '\\|')

# Drop --- row separators
df <- na.omit(df)

# Drop secondary header
df <- df |> 
  filter(!row_number() == 2)
```

## Separate values

```{r}
# TODO See if I can do this in one go with mutate()]
# Retrieve the state values as a new vector
states <- df |> 
  select(pairNum_state) |> 
  filter(str_detect(pairNum_state, "[A-Z]{2}")) |> 
  rename("state" = "pairNum_state")

# Retrieve USCF ID
uscf_id <- df |> 
  select(player_info) |> 
  filter(str_detect(player_info, "[0-9]{8}")) |> 
  mutate(uscf_id = str_extract(player_info, "([0-9]{8})")) |> 
  select(uscf_id)

# Retrieve pre_rating
pre_rating <- df |> 
  select(player_info) |> 
  filter(str_detect(player_info, "[0-9]{8}")) |> 
  mutate(pre_rating = str_extract(player_info, "(?<=R:\\s{1,5})\\d+")) |> 
  select(pre_rating)

# Retrieve post_rating
post_rating <- df |> 
  select(player_info) |> 
  filter(str_detect(player_info, "[0-9]{8}")) |> 
  mutate(post_rating = str_extract(player_info, "(?<=>\\s{0,5})\\d{3,4}")) |> 
  select(post_rating)

```

```{r}
# Drop unnecessary rows and add our formatted vectors

df <- df |> 
  filter(str_detect(pairNum_state, "[0-9]")) |> 
  cbind(states) |> 
  cbind(uscf_id) |>
  cbind(pre_rating) |>
  cbind(post_rating) |> 
  rename("player_no" = "pairNum_state") |> 
  rename("player_name" = "player_info")
```


```{r}
# Clean columns of white spaces
df <- df |> 
  mutate(across(everything(), ~ str_trim(.x))) |> 
  mutate(pre_rating = as.numeric(pre_rating)) |> 
  mutate(post_rating = as.numeric(pre_rating))   
```

## Organize into tables

```{r}
# Split into logical tables

players <- df |> 
  select(player_no, player_name, state, uscf_id, pre_rating, post_rating, total) |> 
  mutate(rating_delta = post_rating - pre_rating)

#TODO make the number of rounds dynamic
rounds <- df |> 
  select(player_no, "1", "2", "3", "4", "5", "6", "7") |> 
  pivot_longer(cols = c("1", "2", "3", "4", "5", "6", "7"), names_to = "round", values_to = "results" )|> 
  separate_wider_regex(col = results, patterns = c(
    'result' = "^(?:[A-Z])",
    'opponent' = "\\s*(?:\\d*)$"
    ),
    too_few = "align_start"
  ) |> 
  mutate(opponent = str_trim(opponent))

```

## Calculate tournament stats

```{r}
average_ratings <- left_join(rounds, players, by = c("opponent" = "player_no")) |> 
  group_by(player_no) |> 
  summarize(average_opponent_rating = mean(pre_rating, na.rm = TRUE))

players <- left_join(players, average_ratings, by = "player_no")
```

## Build final table

```{r}
# player name, player state, total, pre_rating, average pre_rating

final_table <- players |> 
  select(player_name, state, total, pre_rating, average_opponent_rating) |> 
  rename("total_points" = "total")

```


### Player's name

### Player's state

### Total number of points

### Player's pre-rating

### Average pre-rating of opponents

## Building CSV

## Loading to database

## Conclusion
