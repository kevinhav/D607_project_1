---
title: "Chess Tournament Database Pipeline"
author: "Kevin Havis"
format: pdf
editor: visual
---

## Introduction

## Loading the data

```{r}
library(tidyverse)
library(purrr)
```

## Reading the data

```{r}

# Pre-define our initial column names
init_cols = c(
  'pairNum_state',
  'player_info',
  'total',
  'round_1',
  'round_2',
  'round_3',
  'round_4',
  'round_5',
  'round_6',
  'round_7'
)

# Create a tibble by splitting row-wise by line breaks
# and column-wise by pipe
df <- tibble(txt = read_lines('tournament_info.txt')) |> 
  separate_rows(sep = '\\n') |> 
  separate(col = txt, into = init_cols, sep = '\\|')

# Drop --- row separators
df <- na.omit(df)

# Drop secondary header
df <- df |> 
  slice(-(1:2))
```

```{r}
# We have two rows per player so we group them and create new columns

df <- df |> 
  group_by(grp = ceiling(row_number()/2)) |> 
  mutate(row = row_number()) |> 
  pivot_wider(names_from = row, values_from = -c(row, grp)) |> 
  ungroup() |> 
  select(-grp) |> 
  mutate(across(everything(), ~ str_trim(.x)))
```

```{r}
# Update column names
col_names = c(
  "player",
  "state",
  "name",
  "rating_info",
  "total_pts",
  "n",
  "results_rd_1",
  "color_rd_1",
  "results_rd_2",
  "color_rd_2",
  "results_rd_3",
  "color_rd_3",
  "results_rd_4",
  "color_rd_4",
  "results_rd_5",
  "color_rd_5",
  "results_rd_6",
  "color_rd_6",
  "results_rd_7",
  "color_rd_7"
)

df <- df |> set_names(col_names)

```

```{r}
# Split combined columns into single columns
df |> 
 separate_wider_regex(
   starts_with("results"),
   patterns = c(
     result = "[WLDBH]",
     opponent = "\\s+\\d+"),
   names_sep = "_",
   too_few = "align_start")
```

```{r}
# These patterns work in str_view(), but not in separate_wider_regex()
pattern_1 = "\\s*\\d{8}"
pattern_2 = "(?<=R:\\s)\\d{3,4}"
pattern_3 = "(?<=->\\s{0,5})\\d{3,4}"

# Sample data
repr_df <- tibble(rating_info = c(
  "15445895 / R: 1794   ->1817",
  "14598900 / R: 1553   ->1663",
  "14959604 / R: 1384   ->1640"
  )
)

# I separate_wider_regex() does not capture pattern 2 or pattern 3
repr_df_debug <- repr_df |> 
    separate_wider_regex(
    rating_info,
    patterns = c(
      uscfid = pattern_1, # This works
      pre_rating = pattern_2, # This does not work
      post_rating = pattern_3 # This does not work
      ),
    too_few = "debug"
    )


# str_view() works for pattern 2 and 3
str_view(repr_df$rating_info, pattern_2)
str_view(repr_df$rating_info, pattern_3)

```


```{r}
df |> 
  separate_wider_regex(
    rating_info,
    patterns = c(
      #uscfid = "\\s*\\d{8}",
      pre_rating = "(?<=R:\\S)\\d{3,4}",
      post_rating = "(?<=->\\s{0,5})\\d{3,4}"
      ),
    too_few = "debug"
    )
```
```{r}
str_view(df$rating_info, "(?<=R:\\s)\\d{3,4}")
str_extract(df$my_string, "(?<=R:\\s)\\d{3,4}")

```


## Separate values

```{r}
# TODO See if I can do this in one go with mutate()]
# Retrieve the state values as a new vector
states <- df |> 
  select(pairNum_state) |> 
  filter(str_detect(pairNum_state, "[A-Z]{2}")) |> 
  rename("state" = "pairNum_state")

# Retrieve USCF ID
uscf_id <- df |> 
  select(player_info) |> 
  filter(str_detect(player_info, "[0-9]{8}")) |> 
  mutate(uscf_id = str_extract(player_info, "([0-9]{8})")) |> 
  select(uscf_id)

# Retrieve pre_rating
pre_rating <- df |> 
  select(player_info) |> 
  filter(str_detect(player_info, "[0-9]{8}")) |> 
  mutate(pre_rating = str_extract(player_info, "(?<=R:\\s{1,5})\\d+")) |> 
  select(pre_rating)

# Retrieve post_rating
post_rating <- df |> 
  select(player_info) |> 
  filter(str_detect(player_info, "[0-9]{8}")) |> 
  mutate(post_rating = str_extract(player_info, "(?<=>\\s{0,5})\\d{3,4}")) |> 
  select(post_rating)

```

```{r}
# Drop unnecessary rows and add our formatted vectors

df <- df |> 
  filter(str_detect(pairNum_state, "[0-9]")) |> 
  cbind(states) |> 
  cbind(uscf_id) |>
  cbind(pre_rating) |>
  cbind(post_rating) |> 
  rename("player_no" = "pairNum_state") |> 
  rename("player_name" = "player_info")
```


```{r}
# Clean columns of white spaces
df <- df |> 
  mutate(across(everything(), ~ str_trim(.x))) |> 
  mutate(pre_rating = as.numeric(pre_rating)) |> 
  mutate(post_rating = as.numeric(pre_rating))   
```

## Organize into tables

```{r}
# Split into logical tables

players <- df |> 
  select(player_no, player_name, state, uscf_id, pre_rating, post_rating, total) |> 
  mutate(rating_delta = post_rating - pre_rating)

#TODO make the number of rounds dynamic
rounds <- df |> 
  select(player_no, "1", "2", "3", "4", "5", "6", "7") |> 
  pivot_longer(cols = c("1", "2", "3", "4", "5", "6", "7"), names_to = "round", values_to = "results" )|> 
  separate_wider_regex(col = results, patterns = c(
    'result' = "^(?:[A-Z])",
    'opponent' = "\\s*(?:\\d*)$"
    ),
    too_few = "align_start"
  ) |> 
  mutate(opponent = str_trim(opponent))

```

## Calculate tournament stats

```{r}
average_ratings <- left_join(rounds, players, by = c("opponent" = "player_no")) |> 
  group_by(player_no) |> 
  summarize(average_opponent_rating = mean(pre_rating, na.rm = TRUE))

players <- left_join(players, average_ratings, by = "player_no")
```

## Build final table

```{r}
# player name, player state, total, pre_rating, average pre_rating

final_table <- players |> 
  select(player_name, state, total, pre_rating, average_opponent_rating) |> 
  rename("total_points" = "total")

```


### Player's name

### Player's state

### Total number of points

### Player's pre-rating

### Average pre-rating of opponents

## Building CSV

## Loading to database

## Conclusion
